@page "/p"
@inject HttpClient Http
@inject NavigationManager NavManager

<!--p>Short Url: @shortUrl</p-->
<!--p>main site: @mainUrl2</p-->

@if(inList)
{
    <p>in list</p>
}
@if(!inList)
{
    <p>Not in list</p>
}
@if(profile.Count==0)
{
    @if(profiles != null)
    {
        <p> profiles has content while profile still loading</p>
        @foreach(var pfile in profiles)
        {
            <p>@pfile.User</p>
        }
    }
    <p>Loading...</p>

}
else
@if(profile.Count>0)
{
    <p>profile is not null</p>
    <p>profile count is: @profile.Count</p>
    <table>
        @foreach(var pfile in profile)
        {
            <tr>
                <td>User &emsp;</td>
                <td>Name &emsp;</td>
                @if (pfile.Website!="")
                {
                    <td>Main Website &emsp;</td>
                }
                @if (pfile.Twitch != "")
                {
                    <td>Twitch &emsp;</td>
                }
                @if (pfile.Discord != "")
                {
                    <td>Discord &emsp;</td>
                }
                @if (pfile.Twitter != "")
                {
                    <td>Twitter &emsp;</td>
                }

            </tr>
    
            <tr>
                <td>@pfile.User</td>
                <td>@pfile.Name</td>
                @if (pfile.Website != "")
                {
                    <td>@pfile.Website</td>
                }
                @if (pfile.Twitch != "")
                {
                    <td>@pfile.Twitch</td>
                }
                @if (pfile.Discord != "")
                {
                    <td>@pfile.Discord</td>
                }
                @if (pfile.Twitter != "")
                {
                    <td>@pfile.Twitter</td>
                }
            </tr>
            }
    </table>
}

@code 
{
    /*private Profile[] profile;
            private Profiles[] profiles;*/
    private List<Profile> profile = new List<Profile>();//List<Profile> profile;
    private Profiles[] profiles;

    private string who = string.Empty;
    private bool inList = false;
    private bool memberFound = false;

    protected override async Task OnInitializedAsync()
    {
        NavManager.TryGetQueryString<string>("u", out who);
        Console.Out.WriteLine("who is: " + who);
        if (who != string.Empty)
        {
            try
            {//make json for getting list of people to add then load each into a profile object
                profiles = await Http.GetFromJsonAsync<Profiles[]>("profiles/" + "FullDisplayProfiles" + ".json");
                try
                {

                    foreach(var pfile in profiles)
                    {
                        if(pfile.User == who)
                        {
                        profile = new List<Profile>(await Http.GetFromJsonAsync<List<Profile>>("profiles/" + who + ".json"));
                    //profile.Add(await Http.GetFromJsonAsync<Profile>("profiles/" + who + ".json"));
                                //Append( await Http.GetFromJsonAsync<Profile[]>("profiles"+pfile.User + ".json"));
                            //profile.Add(await Http.GetFromJsonAsync<Profile>("profiles/"+ pfile.User + ".json"));
                            inList = true;
                            memberFound = true;
                        }
                        //profile.Add(await Http.GetFromJsonAsync<Profile>("profiles/"+ pfile.User + ".json"));
                        //profile.Append(await Http.GetFromJsonAsync<Profile[]>("profiles/" + pfile.User + ".json"));
                    }
                }
                catch(Exception notFound)
                {
                    Console.Out.WriteLine("not found after attempting to add to profile group");
                    Console.Out.WriteLine(notFound);
                }
            }
            catch (Exception notFound)
            {
                Console.Out.WriteLine("Not found when attempting to read from full diplay profiles");
                Console.Out.WriteLine(notFound);
            }
        }


    }
    public class Profiles
    {
        public string User { get; set; }
        public string ListOnPage { get; set;  }
    }
    public class Profile
    {
        public string User { get; set; }
        public string Name { get; set; }
        public string Website { get; set; }
        public string ListOnPage { get; set; }
        public string Twitch { get; set; }
        public string Discord { get; set; }
        public string Twitter { get; set; }

        //public Boolean ListOnPage { get; set; }
    }
}